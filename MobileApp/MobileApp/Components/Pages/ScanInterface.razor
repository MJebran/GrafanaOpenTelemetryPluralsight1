@page "/camerapage/{EventId:int}"
@inject DataSync db
@using MobileApp.Services
@using TicketClassLib.Exceptions
@using ZXing.Net.Maui;
@using MobileApp;
@using TicketClassLib.Enums
@inject ITicketService ticketService
@inject DataSync dataSync

<h1>Scanning for Event @EventId</h1>

<p>@errMessage</p>
<br />
   
@if (result == "SOMEONE COME GET THIS GUY" )
{
    <div class="alert alert-danger" style="height: 50vh">
        <center><h2>Unsuccessful</h2></center>
        <center class="mt-4"><strong>This ticket has already been scanned<br />Scan Result: @scanResultLabel</strong></center>
    </div>
}
@if (result == "This ticket is good" )
{
     <div class="alert alert-success" style="height: 50vh">
        <center><h2>Ticket Recognized</h2></center>
        <center class="mt-4"><strong>Scan Result: @scanResultLabel</strong></center>
    </div>
}
@if (result == "Unrecognized" )
{
    <div class="alert alert-warning" style="height: 50vh">
        <center><h2>Ticket Unrecognized</h2></center>
        <center class="my-5"><p>Something went wrong.<br /> This ticket is unrecognized. Ensure that it is for the correct event.</p></center>
        <center class="mt-4"><strong>Scan Result: @scanResultLabel</strong></center>
    </div>
}

Scan Result: @scanResultLabel

<div style="position: fixed; bottom: 30px; left: 0; right: 0; display: flex; justify-content: center;">
    <div style="display: flex; margin-left: auto; margin-right: auto;">
        <button @onclick="DoScanAsync" class="btn py-3 px-5" style=" color: white; background-color: #8263DB;"><h2 style="font-weight: bold;">Start Scanning</h2></button>
    </div>
</div>


@code
{
    [Parameter]
    public int EventId { get; set; }

    private string scanResultLabel;
    private string errMessage = "";

    private string result { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await dataSync.DoSync();
        }
        catch (AlreadyScannedTicketException e)
        {
            errMessage = "A TICKET WAS ALREADY SCANNED";
        }
        catch
        {
            errMessage = "Please refresh page, something has gone awry";
        }
    }

    public async Task DoScanAsync()
    {
        result = "";
        var scanResults = await GetScanResultsAsync();
        if (scanResults is not null)
        {
            var ticketGuid = new Guid(scanResults.Value);
            var result = await ticketService.ScanTicket(ticketGuid, EventId);
            DecideResult(result);
        }
    }

    public async Task<BarcodeResult> GetScanResultsAsync()
    {
        var cameraPage = new CameraPage();

        await Application.Current.MainPage.Navigation.PushModalAsync(cameraPage);

        var results = await cameraPage.WaitForResultAsync();

        await Application.Current.MainPage.Navigation.PopModalAsync();

        return results;
    }

    private void DecideResult(TicketStatus ticketResult)
    {
        switch (ticketResult)
        {
            case TicketStatus.Used:
                result = "SOMEONE COME GET THIS GUY";
                break;
            case TicketStatus.Success:
                result = "This ticket is good";
                break;
            case TicketStatus.Unrecognized:
                result = "Unrecognized";
                break;

        }
    }
}